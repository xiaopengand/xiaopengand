<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="0.html"/>
      <url>0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="31415.html"/>
      <url>31415.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="github和gitee上搭建hexo博客"><a href="#github和gitee上搭建hexo博客" class="headerlink" title="github和gitee上搭建hexo博客"></a>github和gitee上搭建hexo博客</h1><h2 id="博客环境搭建"><a href="#博客环境搭建" class="headerlink" title="博客环境搭建"></a>博客环境搭建</h2><ol><li><p>修改配置文件：（不要用windows的记事本），推荐使用<a href="https://www.sublimetext.com/">Sublime Text3</a>、<a href="https://notepad-plus-plus.org/downloads/">NodePad++</a>但是官方有污蔑国家的公告，<a href="https://notepad-plus-plus.org/news/v781-free-uyghur-edition/">新疆</a>、<a href="https://notepad-plus-plus.org/news/v789-stand-with-hong-kong/">香港</a>。</p></li><li><p>下载Git：<a href="https://git-scm.com/downloads">Git</a></p></li><li><p>下载Node.js：<a href="https://nodejs.org/en/download/">Node.js</a></p></li><li><p>查看环境安装是否成功：node -v 出现版本号，npm -v 出现版本号，git –version 出现版本号</p></li><li><p>如果node -v 报错的话，那么将Node.js的安装路径加到环境变量中。</p></li><li><p>设置npm的镜像源：查看npm的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看npm的配置</span><br><span class="line">npm config list</span><br><span class="line">#默认源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org</span><br><span class="line">#临时改变镜像源</span><br><span class="line">npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">#永久设置为淘宝镜像源</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">#另一种方式，编辑 ~&#x2F;.npmrc 加入下面内容</span><br><span class="line">registry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="本地安装hexo静态博客框架"><a href="#本地安装hexo静态博客框架" class="headerlink" title="本地安装hexo静态博客框架"></a>本地安装hexo静态博客框架</h2></li></ol><h3 id="hexo框架安装初始化"><a href="#hexo框架安装初始化" class="headerlink" title="hexo框架安装初始化"></a>hexo框架安装初始化</h3><p>新建一个文件夹，比如BolgTest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择Git Bash Here，然后依次输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># hexo框架的安装</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 等上一个命令完成后，在输入下面的命令</span><br><span class="line">hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹</span><br><span class="line">cd &lt;新建文件夹的名称&gt;</span><br><span class="line">npm install  # 安装博客所需要的依赖文件  </span><br></pre></td></tr></table></figure><h3 id="生成运行"><a href="#生成运行" class="headerlink" title="生成运行"></a>生成运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>浏览器中打开<a href="http://localhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。">http://localhost:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</a></p><h2 id="主题选择个性化修改"><a href="#主题选择个性化修改" class="headerlink" title="主题选择个性化修改"></a>主题选择个性化修改</h2><p>选择主题：在github上找套自己喜欢的主题，下在完解压到&lt;blog安装路径&gt;/themes/下。</p><p>站点配置修改在&lt;blog安装路径&gt;/_config.yml，主题配置文件在&lt;blog安装路径&gt;/themes/&lt;&gt;</p><h4 id="本博客采用-butterfly-主题"><a href="#本博客采用-butterfly-主题" class="headerlink" title="本博客采用 butterfly 主题"></a>本博客采用 butterfly 主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br><span class="line">OR</span><br><span class="line">git clone -b master https:&#x2F;&#x2F;gitee.com&#x2F;iamjerryw&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure><h5 id="应用站点"><a href="#应用站点" class="headerlink" title="应用站点"></a>应用站点</h5><p>修改站点配置文件_config.yml，把主题改为 butterfly<br>theme: butterfly</p><h4 id="个性化修改前安装插件"><a href="#个性化修改前安装插件" class="headerlink" title="个性化修改前安装插件"></a>个性化修改前安装插件</h4><p>个性化修改前安装插件<br>安装 pug 以及 stylus 渲染器插件<br>npm install hexo-renderer-pug hexo-renderer-stylus –save<br>安装将要用到的插件插件<br>注脚插件（可选）： hexo-reference，reference 插件说明。<br>部署插件 (必要)： hexo-deployer-git<br>npm install hexo-wordcount hexo-wordcount hexo-generator-search hexo-reference hexo-deployer-git –save</p><h3 id="美化参考"><a href="#美化参考" class="headerlink" title="美化参考"></a>美化参考</h3><p><a href="https://butterfly.js.org/posts/21cfbf15/#%E5%AE%89%E8%A3%9D">Butterfly 安裝文檔(一) 快速開始</a></p><p><a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面</a></p><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E7%B6%B2%E7%AB%99%E8%B3%87%E6%96%99">Butterfly 安装文档(三) 主题配置</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f">Butterfly 安装文档(四) 主题配置</a></p><p><a href="https://xiabor.com/4215.html">Butterfly 主题更新总结</a></p><p><a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo博客之butterfly主题优雅魔改系列</a></p><p><a href="https://xiabor.com/714f.html">Hexo 大结局</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="3151.html"/>
      <url>3151.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="GIT学习"><a href="#GIT学习" class="headerlink" title="GIT学习"></a>GIT学习</h1><h2 id="Windows安装git"><a href="#Windows安装git" class="headerlink" title="Windows安装git"></a>Windows安装git</h2><p>下载<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 安装无脑下一步</p><h3 id="设置名字，邮箱"><a href="#设置名字，邮箱" class="headerlink" title="设置名字，邮箱"></a>设置名字，邮箱</h3><p>$ git config –global user.name “Xpand”<br>$ git config –global user.email “<a href="mailto:&#97;&#100;&#109;&#x69;&#110;&#x40;&#x71;&#119;&#x61;&#x73;&#46;&#x74;&#x6f;&#112;">&#97;&#100;&#109;&#x69;&#110;&#x40;&#x71;&#119;&#x61;&#x73;&#46;&#x74;&#x6f;&#112;</a>“</p><h4 id="git-config-命令的-–global参数，用了这个参数，表示这台机器上所有仓库都会使用这个配置，当然也可以单独给每个仓库配置"><a href="#git-config-命令的-–global参数，用了这个参数，表示这台机器上所有仓库都会使用这个配置，当然也可以单独给每个仓库配置" class="headerlink" title="git config 命令的 –global参数，用了这个参数，表示这台机器上所有仓库都会使用这个配置，当然也可以单独给每个仓库配置"></a>git config 命令的 –global参数，用了这个参数，表示这台机器上所有仓库都会使用这个配置，当然也可以单独给每个仓库配置</h4><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>cd f: 进入f盘<br>mkdir gitxuexi 创建gitxuexi文件夹<br>cd gitxuexi 进入gitxuexi文件夹<br>pwd 查看当前目录</p><p>$ git init 设置这个目录Git可以管理的仓库<br>Initialized empty Git repository in F:/gitxuexi/.git/<br>仓库创建会生成.git目录，但目录是隐藏的，可以用ls -ah命令查看<br><font color=red>注意：Windows自带的记事本会在每个文件开头添加了0xefbbbf（十六进制）的字符</font></p><h3 id="添加到仓库"><a href="#添加到仓库" class="headerlink" title="添加到仓库"></a>添加到仓库</h3><p>编写一个readme.txt文件，<br>添加git add readme.txt到仓库<br>提交git commit -m “提交说明”</p><h2 id="时光穿梭机"><a href="#时光穿梭机" class="headerlink" title="时光穿梭机"></a>时光穿梭机</h2><p>修改文件内容<br>git status运行查看仓库状态会提示你文件被修改过，但没有准备提交的修改。<br>git diff查看具体被改动的地方</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>git log查看历史记录<br>git log –pretty=oneline查看简略记录<br>上个版本用HEAD^表示，上上个版本用HEAD^^表示，前100版本用HEAD~100<br>回退命令git reset –hard HEAD^<br>回到最新git reset –hard &lt;代表版本号的哈希值&gt;<br>git reflog用来记录你每一次命令</p><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><p>git add 命令实际上就是把要提交的所有修改改到暂放区，然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。</p><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>git diff HEAD – readme.txt<br>git diff HEAD – &lt;需要比较的文件&gt;<br>Git是跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中</p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>git checkout – readme.txt<br>git checkout – &lt;需要撤销的文件&gt;<br>git reset HEAD &lt;需要丢弃修改文件&gt;<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Xpand/img/raw/master/20201208120956.png" alt="撤销修改"></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>创建SSH Key<br>ssh-keygen -t rsa -C “<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x71;&#x77;&#x61;&#x73;&#46;&#116;&#111;&#112;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x71;&#x77;&#x61;&#x73;&#46;&#116;&#111;&#112;</a>“</p><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>从电脑上连接到github仓库上<br>git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:xiaopengand/xpand.git<br>把本地库推送到远程库上<br>git push -u origin master<br>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>从现在起，只要本地作了提交，就可以通过命令：</p><p>$ git push origin master<br>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！<br><font color=red>这里遇到了一个问题，花了我半天时间，<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/Xpand/img/raw/master/20201208120943.png" alt="连不上">最后发现只是公司ip被墙了，用自己流量就行了，就这花了我半天时间。</font></p><h3 id="远程仓库克隆"><a href="#远程仓库克隆" class="headerlink" title="远程仓库克隆"></a>远程仓库克隆</h3><p>git clone &lt;远程仓库地址&gt;</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>查看分支：git branch<br>创建分支：git branch &lt;需要创建分支名&gt;<br>切换分支：git checkout &lt;需要切换的分支&gt; 或 git switch &lt;需要切换的分支&gt;<br>创建+切换分支：git checkout -b <name> 或 git switch -c <name><br>合并某分支到当前分支：git merge <name><br>删除分支：git branch -d <name></p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。<br>用 git log –graph 命令可以看到分支合并图。</p><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p>git merge –no-ff -m “更新说明” &lt;合并分支名&gt;<br>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出曾经做过合并，而fast forward 合并就看不出来曾经做过的合并。</p><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>但手头分支没有完成时，先把工作现场git stash一下，然后去其他分支修复，再git stash pop，回到工作现场；再master分支上修复bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>开发一个新的feature，最好新建一个分支<br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;需要强制删除的分支名&gt; 强行删除。</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>查看远程仓库：git remote<br>或者用 git remote -v 显示更详细的信息<br>显示了push说明有推送权限<br>推送分支：git push origin master<br>推送其他分支：git push &lt;远程仓库名称&gt; &lt;其他分支名称&gt;<br>抓取分支<br>远程克隆：git clone 仓库地址<br>git branch 查看分支<br>git push origin dev 推送dev分支到远程<br>git checkout -b dev origin/dev 创建远程origin的dev分支到本地</p><p>1.首先，可以试图用git push origin <branch-name>推送自己的修改;<br>2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并;<br>3.如果合并有冲突，则解决冲突，并在本地提交；<br>4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！<br>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to <branch-name> origin/<branch-name></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>查看远程库信息，使用git remote -v；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突.</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3>创建标签：git tag <name><br>查看标签：git tag<br>给历史记录打上标签：git tag <name> <commit-id><br>查看标签信息：git show <tagname><br>创建带有说明的标签，用-a指定标签名，-m指定说明文字：<br>git tag -a v0.1 -m ”标签说明“ <commit-id><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3>删除标签：git tag -d <tagname><br>推送标签到远程仓库：git push origin v1.0<br>一次性推送全部标签：git push origin –tags<br>如果删除远程标签：<br>先删除本地git tag -d <tagname><br>然后从远程删除，删除命令也是push，但格式如下：<br>git push origin :refs/tags/<tagname><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><h2 id="使用Gitee"><a href="#使用Gitee" class="headerlink" title="使用Gitee"></a>使用Gitee</h2>使用命令git remote add origin &lt;仓库地址&gt;<br>使用gir remote add时报错<br>说明本地库已经关联了一个名叫origin的远程库，此时，可以先用git remote -v查看远程信息<br>删除已有的github远程库：git remote rm origin<br>再关联Gitee的远程库<br>git remote add origin &lt;gitee仓库地址&gt;<br>通过git push命令就可以把本地库推送到Gitee上。<br>一个本地库同时关联到GitHub，又关联Gitee<br>git remote add github &lt;github仓库地址&gt;<br>git remote add gitee &lt;gitee仓库地址&gt;<br>git push github master<br>git push gitee master<h2 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h2>git config –global color.ui true<br>这样，Git会适当地显示不同的颜色。</li></ul><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>忽略文件的原则是：<br>1.忽略操作系统自动生成的文件，如缩略图等；<br>2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没有必要放进版本库，比如Java生成的.class文件；<br>3.忽略你自己带有敏感信息的配置文件，如存放口令的配置文件。<br>在Git工作区下的根目录创建一个特权的.gitignore文件,然后把要忽略的文件名填进去，Git就会自动忽略这些文件。GitHub上有各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore">配置文件地址https://github.com/github/gitignore</a><br>如果你确实添加该文件，可以用-f强制添加到git：<br>git add -f <file-name><br>或者你发现，可能是.gitignore写的有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查，-v参数查看具体：<br>git check-ignore -v <file-name><br>把指定文件排除在.gitignore规则外的写法就是!+文件名。</p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>git config –global alias.st status<br>输入git st 表示 git status<br>–global 参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。<br>甚至还有人丧心病狂地把lg配置成了：<br>git config –global alias.lg “log –color –graph –pretty=format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</p><p>配置Git的时候，加上–global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：<br>别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。<br>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：</p><h3 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h3><p>文章参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
